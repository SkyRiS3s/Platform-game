/*package platform.game;

import platform.game.level.Level;
import java.util.ArrayList;
import java.util.List;
import platform.util.Box;
import platform.util.SortedCollection;

import platform.util.Input;
import platform.util.Loader;
import platform.util.Output;
import platform.util.Vector;
import platform.util.View;
import platform.util.Sprite ;
*//**
	* Basic implementation of world, managing a complete collection of actors.
	*/
/*
public class Simulator implements World {

 private Loader loader;

 *//**
	* Create a new simulator.
	* @param loader associated loader, not null
	* @param args level arguments, not null
	*/
/*
public Simulator(Loader loader, String[] args) {
 if (loader == null)
     throw new NullPointerException();
 this.loader = loader;      
}

private final SortedCollection<Actor> actors;
private List<Actor> registered;
private List<Actor> unregistered;

public void preUpdate(Input input, Output output){};
public void postUpdate(Input input, Output output){};

*//**
	* Simulate a single step of the simulation.
	* @param input input object to use, not null
	* @param output output object to use, not null
	*//*
	public void update(Input input, Output output) {
	
	// TO BE COMPLETED
	Sprite sprite = loader.getSprite("heart.full");
	Box zone = new Box(new Vector (100.0 , 100.0) , 32, 32) ;
	output.drawSprite(sprite , zone) ;
	
	for (Actor actor : actors)
	for (Actor other : actors)
	if (actor.getPriority () > other.getPriority ())
	actor.interact(other) ;
	
	for (Actor a : actors)
	a.update(view) ;		
	for (Actor a : actors) // sera retouchée un peu plus loin
	a.draw(view , view) ;
	
	// Draw everything
	for (Actor a : actors.descending ())
	a.draw(view , view) ;
	
	// Add registered actors
	for (int i = 0 ; i < registered.size() ; ++i) {
	Actor actor = registered.get(i) ;
	if ( !actors.contains(actor)) {
	actors.add(actor) ;
	//register(actor.getWorld());
	}
	}
	registered.clear () ;
	//JAUNE
	
	// Remove unregistered actors
	for (int i = 0 ; i < unregistered.size() ; ++i) {
	Actor actor = unregistered.get(i) ;
	actors.remove(actor) ;
	}
	unregistered.clear () ;
	
	
	}
	
	
	
	@Override
	public void register(Actor actor) {
	registered.add(actor) ;
	}
	@Override
	public void unregister(Actor actor) {
	unregistered.add(actor) ;
	}
	
	@Override
	public Loader getLoader() {
	return loader;
	}
	
	
	}
	*/
package platform.game;

import platform.game.level.Level;
import java.util.ArrayList;
import java.util.List;
import platform.util.Box;

import platform.util.Input;
import platform.util.Loader;
import platform.util.Output;
import platform.util.SortedCollection;
import platform.util.Vector;
import platform.util.View;

import platform.util.Sprite;

/**
 * Basic implementation of world, managing a complete collection of actors.
 */
public class Simulator implements World {

	private Loader loader;
	private Vector currentCenter;
	private double currentRadius;
	private Vector expectedCenter;
	private double expectedRadius;
	private SortedCollection<Actor> actors = new SortedCollection<Actor>();
	private List<Actor> registered;
	private List<Actor> unregistered;
	private Level next;
	private boolean transition;

	/**
	 * Create a new simulator.
	 * 
	 * @param loader
	 *            associated loader, not null
	 * @param args
	 *            level arguments, not null
	 */
	public Simulator(Loader loader, String[] args) {
		if (loader == null) {
			throw new NullPointerException();
		}
		this.loader = loader;
		currentCenter = Vector.ZERO;
		currentRadius = 10.0;
		expectedCenter = currentCenter;
		expectedRadius = currentRadius;
		registered = new ArrayList<Actor>();
		unregistered = new ArrayList<Actor>();
		this.next = Level.createDefaultLevel();
		this.transition = false;
		/*Sprite sprite = getLoader().getSprite("box.empty");
		Box zone1 = new Box(new Vector(-4, -1), new Vector(4, 0));
		Box zone2 = new Box(new Vector(-2, 0), new Vector(-1, 1));
		Block block1 = new Block(zone1, sprite);
		Block block2 = new Block(zone2, sprite);
		register(block1);
		register(block2);

		Player player = new Player(new Vector(2, 3), new Vector(0, -1));
		register(player);
		Fireball ball = new Fireball(new Vector(3, 1), new Vector(-3, 5));
		register(ball);/*
	}

	@Override
	public void setView(Vector center, double radius) {
		if (center == null)
			throw new NullPointerException();
		if (radius <= 0.0)
			throw new IllegalArgumentException("radius must be positive");
		expectedCenter = center;
		expectedRadius = radius;
	}

	/**
	 * Simulate a single step of the simulation.
	 * 
	 * @param input
	 *            input object to use, not null
	 * @param output
	 *            output object to use, not null
	 */
	public void update(Input input, Output output) {

		// TO BE COMPLETED

		double factor = 0.001;
		currentCenter = currentCenter.mul(1.0 - factor).add(expectedCenter.mul(factor));
		currentRadius = currentRadius * (1.0 - factor) + expectedRadius * factor;

		View view = new View(input, output);
		view.setTarget(currentCenter, currentRadius);
		Sprite sprite = loader.getSprite("heart.full");
		// on exprime les coordonnées et la taille dans le
		// nouveau référentiel :
		Box zone = new Box(new Vector(0.0, 0.0), 2, 2);
		// on dessine dans la vue :
		/*
		 * view.drawSprite(sprite , zone) ; if
		 * (view.getMouseButton(1).isPressed()){
		 * setView(view.getMouseLocation(), 10.0) ; }
		 */

		for (Actor actor : actors) {
			for (Actor other : actors) {
				if (actor.getPriority() > other.getPriority()) {
					actor.interact(other);
				}
			}
		}

		for (Actor a : actors) {
			a.update(view);
		}
		// Draw everything
		for (Actor a : actors.descending())
			a.draw(view, view);

		// Add registered actors

		for (int i = 0; i < registered.size(); ++i) {
			Actor actor = registered.get(i);
			if (!actors.contains(actor)) {
				actors.add(actor);
				actor.register(this);
			}
		}
		registered.clear();
		// Remove unregistered actors
		for (int i = 0; i < unregistered.size(); ++i) {
			Actor actor = unregistered.get(i);
			actors.remove(actor);
			actor.unregister();
		}
		unregistered.clear();

		// si un acteur a mis transition à true pour demander le passage
		// à un autre niveau :
		if (transition) {
			if (next == null) {
				next = Level.createDefaultLevel();
			}
			// si un acteur a appelé setNextLevel , next ne sera pas null :
			Level level = next;
			transition = false;
			next = null;
			actors.clear();
			registered.clear();
			// tous les anciens acteurs sont désenregistrés ,
			// y compris le Level précédent :
			unregistered.clear();
			register(level);
		}

	}

	@Override
	public Loader getLoader() {
		return loader;
	}

	@Override
	public void register(Actor actor) {
		registered.add(actor);
		actor.register(this);
	}

	@Override
	public void unregister(Actor actor) {
		unregistered.add(actor);
	}

	public void preUpdate(Input input, Output output) {
	};

	public void postpdate(Input input, Output output) {
	};

	/*
	 * public platform.game.level.Level getNext() { return next; } public void
	 * setNext(platform.game.level.Level next) { this.next = next; }
	 */

	@Override
	public void nextLevel() {
		transition = true;
	}

	@Override
	public void setNextLevel(Level level) {
		next = level;
	};
	
	//Initialisation de "transition":
	public void transition() {
		
	}

}
